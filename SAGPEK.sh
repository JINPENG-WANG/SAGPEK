#!/bin/bash


function help 
{
	echo "
	
	SAGPEK: a command-line software to judge the genotypes of investigated loci in a batch of ABI files generated by Sanger sequencing
	
	Version: v1.0
	
	About: Developed in the Institute of Animal Science and Veterinary Medicine, Shandong Academy of Agricultural Sciences, China
	
	Developers: Jinpeng Wang, Jinming Huang, etc.
	
	Source code and details: https://github.com/JINPENG-WANG/SAGPEK
	
	E-mail: wangjinpeng0225@163.com and huangjinm@sina.com
	

	Citation: Jinpeng Wang, et al. SAGPEK: fast and flexible approach to identify genotypes of Sanger sequencing data.
	
	Description: Software packages for Sanger sequencing have shown little progress over time, although it is still widely used in human
	genetic disease diagnosis and livestock animal breeding. Determing the genotypes of tens to hundreds of sites in hundreds to thousands 
	of samples simultanenously in Sanger sequencing data by manual visual conformation with traditioanl software is still time-consuming and 
	error-prone. Here, we present SAGPEK, which automatically identifies genotypes of target loci from hundreds to thousands of ABI-format 
	Sanger sequencing data and directly reports genotypes to the output file. SAGPEK extracts the signal intensities representing the A, G, C, 
	and T bases and makes base-calling to determine each sites homozygous or heterozygous status. At this step, SAGPEK generates a primary sequence
	to record the bases with the highest signal intensity and secondary bases if the site is heterozygous. Then SAGPEK obtains the coordinates of 
	target loci by mapping anchoring sequences, which are built in the software or provided by users, to the primary sequence. At last, SAGPEK 
	reports the genotypes of investigated target loci and could also report the alterations of corresponding amino acids. SAGPEK is suitable for 
	human genetic disease screening, drug-resistant mutation identification, livestock animal functional mutation detection, and other similar 
	situations.

	Instuction: the list of operations and options that are supported by SAGPEK
	-t  TYPE of situations: TEST, HBV, PAH, cattle_CN, cattle_DUMPS, custom. If the custom is selected, a tag file must be provided with -g. 
			See exmaples with  -u option. 
	-g  The file name of the  tag file name for customized sites. Must be used together with the -t option.
	-h  Print the help information.
	-u  Print the usage examples.
	-r	The option which indicates that the input ABI files were generated by Sanger sequencing from the reverse orientation. 
	"
	exit 1
}

function usage
{
	 echo "
	 Examples of SAGPEK usage.
	 Note: ABI-format files should be placed in the ABI directory.

	 *********************************
		(1) Example 1:  For testing. SAGPEK provides 15 ABI-format files generated from the Sanger sequencing of part 
		cattle Casein gene! SAGPEK provides three built-in anchoring sequences to identify genotypes of three sites 
		locating in coding regions. Both genotypes and responding amino-acids are reported in the output file.
		
		$ bash SAGPEK.sh -t TEST

		(2) Example 2:  For detecting mutation sites of HBV. SAGPEK provides 25 anchoring sequences for 25 common mutation
		sites. Users shoud provide ABI-format files generated from the Sanger sequencing of HBV viruses.
		
		$ bash SAGPEK.sh -t HBV
		
		(3) Example 3:  For detecting mutation sites of the phenylalanine hydroxylase (PAH) gene, which is the critical gene 
		in the phenylketonuria (PKU) disease. SAGPEK provides 14 anchoring sequences for 14 common mutation sites.
		
		$ bash SAGPEK.sh -t PAH

		(4) Example 4:  For detecting the mutation of cattle argininosuccinate synthetase (ASS) gene, which resulted in 
		the citrullinemia of cattle. SAGPEK provides one anchoring sequence for the nonsense mutation (CGA->TGA). 
		
		$ bash SAGPEK.sh -t cattle_CN

		(5) Example 5: For detecting the mutation of cattle UMPS gene, which resulted in the DUMPS of cattle. SAPEK provides
		one anchoring sequence for the C/T point mutation at the 405th codon of the C-terminal encoded by the UMPS gene.
		
		$ bash SAGPEK.sh -t cattle_DUMPS

		(6) Example 6: For detecting the genotypes of user-defined sites, the 'custom' model should be used. Users should provide 
		a file keeping user-defined anchoring sequence with any name.This file should be placed in the Custom directory. This 
		file should be header-free and contain two columns: the first lists the tag names, and the second lists the anchoring 
		sequences. If amino acid alteration needs to be generated in the output file, make sure the anchoring sequences are 
		located just in front of the first base of the investigated condons.
		
		$ bash SAGPEK.sh -t custom -g ab.tags.txt

		(7) Example 7: If Sanger sequencing was performed from the reverse orientation, users should invoke the -r option of SAGPEK
		which will generate the reverse complementary sequences and search for anchoring sequences user-defined. The anchoring sequences
		should be in forward orientation, that is 5'->3'.

		$ bash SAGPEK.sh -t custom -g ab_reverse.tags.xt -r 
	 
		************************************	
	 Note: For the TEST, HBV, PAH, cattle_CN, and cattle_DUMPS types, SAGPEK has built-in anchoring sequences. 
	  For the custom type, anchoring sequences will be obtained from the "ab.tags.txt" file, 
	  which SAGPEK provided as an example file under the "Custom" folder.
	 "
	 exit 1
}


# specifying the options

parameter_count=0
orientation="f"

while getopts ":t:g:hur" OPT; do


 	 case $OPT in
		 t)type="$OPTARG"
			 parameter_count=1
			if [ "$type" = 'custom' ] || [ "$type" =  'cattle_DUMPS' ] || [ "$type" = 'cattle_CN' ] || [ "$type" =  'TEST' ] || [ "$type" = 'HBV' ] || [ "$type" = 'PAH' ]; then 
				echo " #SAGPEK: The type of RUN is: $type"
			else 
				echo " #SAGPEK: Invalid option: $type! Please refer Usages with -u"
				exit 1
			fi
			;;

		 g)tag="$OPTARG"
			 parameter_count=1
			 echo " #SAGPEK: The customized tag file is: $tag"
			 ;;
			 
		 u)usage
			 parameter_count=1
			 ;;
	   
		 h)help
			 parameter_count=1
			 ;;
		 r)
			 parameter_count=1
			 echo " #SAGPEK: The orientation of primer is: Reverse!"
			 orientation="r"
			 ;;
		 ?)
			 parameter_count=1
			echo " #SAGPEK: Invalid option or Parameters not provided, please see the Help using -h or the -u option:" >&2
			exit 1
		  ;;
		 
		 :)
		  echo " #SAGPEK: Argument missing from -%s option\n" $OPTARG 
		  exit 1
		  ;;
   
  	esac
done

# Check if customized tag file is provided if the custom mode was selected.
if [ "$type" = 'custom' ]; then
	if [[ -z $tag   ]]; then
		echo " #SAGPEK: As the type is custom, the customized tag file must be provided!"
		exit 1
	fi
fi

# If no option was provided, print the help info.
if [ "$parameter_count" == 0  ]; then
	help
	exit 1
fi


shift $((OPTIND -1))

# Check if Rscript exists.
if ! type "Rscript" > /dev/null; then
	echo " #SAGPEK: R software and Rscript not installed or activated!"
	exit 1
fi

# Check if Perl exists.
if ! type "perl" > /dev/null; then
	echo " #SAGPEK: Perl not installed!"
	exit 1
fi







Rscript Src/Script01.get.amPeak.R  $type


perl Src/Script02.get.genotypes.pl $type  $tag $orientation

echo "#SAGPEK: Program completed!"
